# -*- coding: utf-8 -*-
"""AI4ALL_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_FZ3-RIIkjfrShWSiAdV-OJKkre_2crR
"""

#training and testing on original dataset
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

df = pd.read_csv('games1.csv')

for col in ['GAME_ID','HOME_TEAM_ID', 'VISITOR_TEAM_ID']:
    df[col] = df[col].astype('category')

df = pd.get_dummies(data=df,columns=['GAME_ID','HOME_TEAM_ID','VISITOR_TEAM_ID'])
df

X = df.drop(columns = ['HOME_TEAM_WINS', 'GAME_DATE_EST'])
y = df['HOME_TEAM_WINS']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2)

model = DecisionTreeClassifier()
model.fit(X_train, y_train)
predictions = model.predict(X_test)

score = accuracy_score(y_test, predictions)
print(score)

#training and testing on final dataset
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

df = pd.read_csv('MergedDF.csv')

for col in ['GAME_ID','HOME_TEAM_ID', 'VISITOR_TEAM_ID', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44']:
    df[col] = df[col].astype('category')

df = pd.get_dummies(data=df,columns=['GAME_ID','HOME_TEAM_ID', 'VISITOR_TEAM_ID', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44'])
df

X = df.drop(columns = ['HOME_TEAM_WINS', 'GAME_DATE_EST'])
y = df['HOME_TEAM_WINS']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2)

model = DecisionTreeClassifier()
model.fit(X_train, y_train)
predictions = model.predict(X_test)

score = accuracy_score(y_test, predictions)
print(score)

#merging two initial datasets for final dataset
import pandas as pd
import numpy as np
import re
games = pd.read_csv('games1.csv', na_values=[np.nan])
players = pd.read_csv('games_details1.csv', na_values=[np.nan])

PLAYERS = []
for ID_GAMES in games['GAME_ID']:
  game1 = players.loc[players['GAME_ID'] == ID_GAMES, ['PLAYER_ID']].values
  PLAYERS.append(game1)
PLAYERS
# Finding max amount of players in a game
maxLength = 0
for i in range(len(PLAYERS)):
  if maxLength < len(PLAYERS[i]):
      maxLength = len(PLAYERS[i])
print('Max Players: ', maxLength)
#len(PLAYERS[5])

# Looping through each game array of players by index
sizeOfPlayers = len(PLAYERS)
first = True
maxLength = 45
for i in range(sizeOfPlayers):
    playerList = []
    playerList = PLAYERS[i].tolist()
    # Set the player size of each game before convertions
    tempPlayers = []
    for j in range(maxLength):
        tempPlayers.append(np.nan)
    for j in range(len(playerList)):
        #Get regular expression out here
        result = re.search('\d+', str(playerList[j]))
        if result != None:
            tempPlayers[j] = result.group(0)
    # Convering each game into a dataframe
    tempDF = pd.DataFrame(tempPlayers)
    # Transposing the column into a row
    tempTranspose = tempDF.transpose()

    # Concating rows together
    if first == True:
        df = tempTranspose.copy()
        first = False
    else:
        df = df.append(tempTranspose)

df.to_csv('Checkpoint1.csv', index=False)

df.insert(0, 'GAME_ID', games['GAME_ID'].values)
df.to_csv('Checkpoint2.csv', index=False)
FinalDf = pd.merge(games, df, on="GAME_ID")
FinalDf.to_csv('MergedDF.csv', index=False)

#Exploratory Data Analysis, analyse data before running algorithm
!pip install sweetviz
import pandas as pd
df = pd.read_csv('MergedDF.csv')

import sweetviz as sv
#analyzing the dataset
advert_report = sv.analyze(df)
#display the report
advert_report.show_html('Report.html')